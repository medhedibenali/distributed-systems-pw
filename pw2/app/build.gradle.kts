/*
 * This file was generated by the Gradle 'init' task.
 *
 * This generated file contains a sample Java application project to get you started.
 * For more details on building Java & JVM projects, please refer to https://docs.gradle.org/8.6/userguide/building_java_projects.html in the Gradle documentation.
 */

plugins {
    // Apply the application plugin to add support for building a CLI application in Java.
    application
}

repositories {
    // Use Maven Central for resolving dependencies.
    mavenCentral()
}

dependencies {
    // Use JUnit Jupiter for testing.
    testImplementation(libs.junit.jupiter)

    testRuntimeOnly("org.junit.platform:junit-platform-launcher")

    // This dependency is used by the application.
    implementation("com.rabbitmq:amqp-client:5.20.0")
    implementation("mysql:mysql-connector-java:8.0.32")
}

// Apply a specific Java toolchain to ease working on different environments.
java {
    toolchain {
        languageVersion = JavaLanguageVersion.of(21)
    }
}

tasks.register<JavaExec>("startHORabbitMQ") {
    environment("DB_CONNECTION_STRING", "jdbc:mysql://localhost:3306/ho_db")
    environment("DB_USER", "sys_user")
    environment("DB_PASSWORD", "sys_password")
    environment("RABBITMQ_LOCAL_HOST", "localhost")
    environment("RABBITMQ_LOCAL_PORT", "30000")
    environment("RABBITMQ_LOCAL_QUEUE", "ho-queue")

    mainClass.set("edu.distributedsystems.pw2.HORabbitMQ")
    classpath = sourceSets["main"].runtimeClasspath
}

tasks.register<JavaExec>("startHOClient") {
    environment("DB_CONNECTION_STRING", "jdbc:mysql://localhost:3306/ho_db")
    environment("DB_USER", "sys_user")
    environment("DB_PASSWORD", "sys_password")

    mainClass.set("edu.distributedsystems.pw2.HOClient")
    classpath = sourceSets["main"].runtimeClasspath
}

tasks.register<JavaExec>("startBO1RabbitMQ") {
    environment("RABBITMQ_LOCAL_HOST", "localhost")
    environment("RABBITMQ_LOCAL_PORT", "30002")
    environment("RABBITMQ_LOCAL_QUEUE", "bo1-queue")
    environment("RABBITMQ_REMOTE_HOST", "localhost")
    environment("RABBITMQ_REMOTE_PORT", "30000")
    environment("RABBITMQ_REMOTE_QUEUE", "ho-queue")

    mainClass.set("edu.distributedsystems.pw2.BORabbitMQ")
    classpath = sourceSets["main"].runtimeClasspath
}

tasks.register<JavaExec>("startBO1Client") {
    environment("DB_CONNECTION_STRING", "jdbc:mysql://localhost:3306/bo1_db")
    environment("DB_USER", "sys_user")
    environment("DB_PASSWORD", "sys_password")
    environment("RABBITMQ_LOCAL_HOST", "localhost")
    environment("RABBITMQ_LOCAL_PORT", "30002")
    environment("RABBITMQ_LOCAL_QUEUE", "bo1-queue")

    mainClass.set("edu.distributedsystems.pw2.BOClient")
    classpath = sourceSets["main"].runtimeClasspath
}

tasks.register<JavaExec>("startBO2RabbitMQ") {
    environment("RABBITMQ_LOCAL_HOST", "localhost")
    environment("RABBITMQ_LOCAL_PORT", "30004")
    environment("RABBITMQ_LOCAL_QUEUE", "bo2-queue")
    environment("RABBITMQ_REMOTE_HOST", "localhost")
    environment("RABBITMQ_REMOTE_PORT", "30000")
    environment("RABBITMQ_REMOTE_QUEUE", "ho-queue")

    mainClass.set("edu.distributedsystems.pw2.BORabbitMQ")
    classpath = sourceSets["main"].runtimeClasspath
}

tasks.register<JavaExec>("startBO2Client") {
    environment("DB_CONNECTION_STRING", "jdbc:mysql://localhost:3306/bo2_db")
    environment("DB_USER", "sys_user")
    environment("DB_PASSWORD", "sys_password")
    environment("RABBITMQ_LOCAL_HOST", "localhost")
    environment("RABBITMQ_LOCAL_PORT", "30004")
    environment("RABBITMQ_LOCAL_QUEUE", "bo2-queue")

    mainClass.set("edu.distributedsystems.pw2.BOClient")
    classpath = sourceSets["main"].runtimeClasspath
}

tasks.named<Test>("test") {
    // Use JUnit Platform for unit tests.
    useJUnitPlatform()
}
